# Generated by Django 2.2 on 2020-05-29 01:34

import datetime
from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('password', models.CharField(max_length=200, verbose_name='密码')),
                ('name', models.CharField(max_length=50, verbose_name='昵称')),
                ('phone', models.CharField(max_length=50, verbose_name='手机')),
                ('email', models.EmailField(max_length=254, verbose_name='邮箱')),
                ('img', models.FileField(upload_to='user', verbose_name='头像')),
                ('sex', models.BooleanField(default=True, verbose_name='性别')),
                ('is_subscribe', models.BooleanField(default=True, verbose_name='是否同意订阅')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': '用户数据',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='合作方名字')),
                ('info', models.TextField(verbose_name='合作方介绍')),
                ('url', models.CharField(max_length=50, verbose_name='合作方链接')),
                ('is_delete', models.BooleanField(default=True, verbose_name='是否展示至页面')),
            ],
            options={
                'verbose_name_plural': '合作伙伴',
                'verbose_name': '合作伙伴',
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, verbose_name='游戏名字')),
                ('price', models.IntegerField(default=0, null=True, verbose_name='游戏价格')),
                ('info', models.TextField(verbose_name='游戏简介')),
                ('url', models.CharField(max_length=200, verbose_name='游戏链接')),
                ('g_time', models.DateField(verbose_name='游戏发布时间')),
                ('img', models.ImageField(null=True, upload_to='user', verbose_name='游戏图片在首页展示')),
                ('is_delte', models.BooleanField(default=True, verbose_name='是否展示在页面上')),
                ('like', models.ManyToManyField(to=settings.AUTH_USER_MODEL, verbose_name='喜欢的用户')),
            ],
            options={
                'verbose_name_plural': '游戏详情',
            },
        ),
        migrations.CreateModel(
            name='GameType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50, verbose_name='游戏类型')),
            ],
            options={
                'verbose_name_plural': '游戏分类',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tag_name', models.CharField(max_length=50, verbose_name='标签名字')),
            ],
            options={
                'verbose_name_plural': '游戏标签',
            },
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='评论内容')),
                ('M_time', models.DateTimeField(default=datetime.datetime(2020, 5, 29, 1, 34, 42, 327305, tzinfo=utc), verbose_name='评论时间')),
                ('is_delete', models.BooleanField(default=True, verbose_name='是否展示在页面')),
                ('score', models.ImageField(upload_to='', verbose_name='评分')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='guo.Game')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name_plural': '用户评价',
            },
        ),
        migrations.CreateModel(
            name='GameImgFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('img', models.FileField(upload_to='img', verbose_name='图片')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='guo.Game')),
            ],
            options={
                'verbose_name_plural': '游戏图片',
            },
        ),
        migrations.CreateModel(
            name='GameGifFile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gif', models.FileField(upload_to='gif', verbose_name='动画')),
                ('game', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='guo.Game')),
            ],
            options={
                'verbose_name_plural': '游戏动画',
            },
        ),
        migrations.AddField(
            model_name='game',
            name='tag',
            field=models.ManyToManyField(related_name='tags', to='guo.Tag', verbose_name='游戏标签'),
        ),
        migrations.AddField(
            model_name='game',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='guo.GameType', verbose_name='类型'),
        ),
    ]
